#!/bin/bash
echo "Adding $1 to Anki..."
file_path="$(readlink -f $1)"

function add_note {
  file_path=$(basename $1)
  dd_name=${file_path%%.*}
  echo -e "${file_path%%.*}\n$2"
  JSON_STRING=$(jq -n -r -s --arg path "$1" \
    --arg back_content "$2" \
    --arg file_name "$(basename $1)" \
    --arg dd_name "$dd_name" \
    '{
      "action": "addNote",
      "version": 6,
      "params": {
          "note": {
              "deckName": "Daily Dictation",
              "modelName": "Basic",
              "fields": {
                  "Front": $dd_name,
                  "Back": $back_content
              },
              "options": {
                  "allowDuplicate": false,
                  "duplicateScope": "deck",
                  "duplicateScopeOptions": {
                      "deckName": "Daily Dictation",
                      "checkChildren": false,
                      "checkAllModels": false
                  }
              },
              "tags": [
                  "ydd"
              ],
              "audio": [{
                  "filename": $file_name,
                  "path": $path,
                  "fields": [
                      "Front"
                  ]
              }],
          }
      }
  }')
  echo $JSON_STRING
  curl localhost:8765 -X POST -d "$JSON_STRING"
}

function read_back_content {
  read -r -p "Enter the back content: " back_content
  read -p "Please confirm the back content: $back_content [y/n] " yn
  case $yn in
  [Yy]*) echo $back_content ;;
  [Nn]*) read_back_content ;;
  *) echo "Please answer yes or no." ;;
  esac
}

afplay $file_path
while true; do
  read -p "Do you want to add this note to Anki? [y/n] " yn
  case $yn in
  [Yy]*)
    back_content=$(read_back_content)
    test -z "$back_content" && echo "Back content cannot be empty." && exit 1
    add_note "$file_path" "$back_content"
    break
    ;;
  [Nn]*) exit ;;
  *) echo "Please answer yes or no." ;;
  esac
done
